// Наследует класс Child от класса Parent.
// Копирует все методы и свойства родителя
function extend(Child, Parent) {
    var F = function () { };
    F.prototype = Parent.prototype;

    var f = new F();
    
    for (var prop in Child.prototype) f[prop] = Child.prototype[prop];
    Child.prototype = f;
    Child.superclass = Parent.prototype;
}

// ------------------------------------------------------------------------------------
// Класс, управляющий страницей просмотра и редактирования.
// Использование:
// var pageController = new IndexPageController();
// pageController.init(json с элементами);
// pageController.parmDeleteActionSelector('селектор ссылок на удаление элементов в таблице');
// pageController.parmTableSelector('Селектор контейнера, содержащего таблицу с элементами');
// pageController.parmExtractingSelector('Селектор контейнера, который следует вытащить страницы редактирования');
// pageController.parmEditFormSelector('Селектор, куда поместить форму редактирования');
// pageController.setDeleteAction(); // Задает deleteAction для ссылок на удаление элементов
// pageController.setEditAction(); // Превращает строки таблицы в ссылки на редактирование элементов
// pageController.insertRow($('строка таблицы')); // Вставляет строку в таблицу
// pageController.updateRow($('строка таблицы'), id_строки); // Замещает троку на обновленную
// pageController.deleteRow(id); // Удаляет строку с указанным id
// ------------------------------------------------------------------------------------
// Для корректрой работы класса строкам таблицы неоходимо присвоить id элементов в базе данных,
// а так же прописать каждой строке ссылку на редактирование соответствующей записи в атрибут 
// data-link
// ------------------------------------------------------------------------------------
function IndexPageController() {
  this.items = {};
  this.deleteActionSelector;
  this.tableSelector;
  this.editFormSelector;
  this.extractingSelector;
}

IndexPageController.prototype = {
  init: function(itemsArray) {
    for(var i = 0; i < itemsArray.length; i++) {
      this.items[itemsArray[i].id] = itemsArray[i];
    }
  },

  parmDeleteActionSelector: function(selector) {
    this.deleteActionSelector = selector;
  },

  parmTableSelector: function(selector) {
    this.tableSelector = selector;
  },

  parmEditFormSelector: function(selector) {
    this.editFormSelector = selector;
  },

  parmExtractingSelector: function(selector) {
    this.extractingSelector = selector;
  },

  setDeleteAction: function() {
    if(this.deleteActionSelector) {
      $(this.deleteActionSelector).on("ajax:success", function(e, data, status, xhr){
      }).bind("ajax:error", function(e, xhr, status, error){
        console.log(xhr.responseText);
      });
    }
  },

  setEditAction: function(element) {
    var self = this;

    function editAction() {
      console.log($(this).parent().attr('data-link'));
      $.ajax({
        type: "GET",
        url: $(this).parent().attr('data-link'),
        success: function(data) {
          var formElement = $(self.editFormSelector);
          var extractingElement = self.extractingSelector;
          var tableElement = $(self.tableSelector);

          formElement.empty();
          tableElement.css("display", "none");

          function closeForm(event) {
            formElement.animate({opacity: 0}, 300, function() {
                formElement.css("display", "none").empty();
                console.log("Спрятали");
                tableElement.css("display", "");
            });
          }

          formElement.append($(data).find(extractingElement));
          console.log("Открыли");
          formElement.find('input[type="submit"]').bind("click", closeForm);

          var btn = $("<input type='button' value='X' class='btn btn-default' style='float: right;'>");
          btn.bind("click", closeForm);
          var col2 = $("<div class='col-md-2 text-right' style='padding-top: 5px;'></div>");
          var row = formElement.find("#edit-label");
          row.append($(col2));
          col2.append($(btn));

          formElement.css("display", "block");
          if(formElement.css("opacity") != 1)
          {
              formElement.css("opacity", "0");
              formElement.animate({opacity: 1}, 200, function() {});
          }
          return false;
        },
        error: function(data) {
          return false;
        }
      });
    }

    if(element) {
      element.find('td:not(.actions)').click(editAction);
    }
    else {
      $(this.tableSelector).find('td:not(.actions)').click(editAction);
    }
  },

  insertRow: function(row, item) {
    var self = this;
    this.items[item.id] = item;

    row.prependTo(this.tableSelector + " tbody")
    .animate({opacity: 1}, 500, function() {
      self.setDeleteAction();
      self.setEditAction(row);
    });
  },

  updateRow: function(row, item) {
    var self = this;
    this.items[item.id] = item;
    
    row.insertAfter($(this.tableSelector).find("#" + item.id));
    $($(this.tableSelector).find("#" + item.id)).remove();
    this.setDeleteAction();
    this.setEditAction(row);
  },

  deleteRow: function(item_id) {
    $($(this.tableSelector).find("#" + item_id)).animate({opacity: 0}, 500, function() {
      $(this).remove();
    });

    delete this.items[item_id];
  }
};

function AllRequestsTemplate() {
  this.items = {};
  this.deleteActionSelector;
  this.tableSelector;
  this.editFormSelector;
  this.extractingSelector;
}

AllRequestsTemplate.prototype = {
  
};

extend(AllRequestsTemplate, IndexPageController);

function RequestTasksTemplate() {
  this.items = {};
  this.deleteActionSelector;
  this.tableSelector;
  this.editFormSelector;
  this.extractingSelector;
}

RequestTasksTemplate.prototype = {
  
};

extend(RequestTasksTemplate, IndexPageController);

function EmployeesTemplate() {
  this.items = {};
  this.deleteActionSelector;
  this.tableSelector;
  this.editFormSelector;
  this.extractingSelector;
}

EmployeesTemplate.prototype = {
  
};

extend(EmployeesTemplate, IndexPageController);

function UsersTemplate() {
  this.items = {};
  this.deleteActionSelector;
  this.tableSelector;
  this.editFormSelector;
  this.extractingSelector;
}

UsersTemplate.prototype = {
  
};

extend(UsersTemplate, IndexPageController);

function MessagesTemplate() {
  this.items = {};
  this.deleteActionSelector;
  this.tableSelector;
  this.editFormSelector;
  this.extractingSelector;
}

MessagesTemplate.prototype = {
  
};

extend(MessagesTemplate, IndexPageController);