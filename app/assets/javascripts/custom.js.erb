// Превращает кнопки в контейнере в переключатели
// В один момент может быть включена только одна кнопка
// Значение кнопки сохраняется в атрибут value контейнера
// После нажатия кнопки выполняется метод clickMethod
function Switchable(containerSelector, clickMethod)
{
	var container    = $(containerSelector);
	var buttons      = container.find("button");
	container.attr('value', 'undefined');

	function onClickMethod() {
		buttons.removeAttr('disabled');
		buttons.removeClass('active');
		$(this).attr('disabled', 'disabled');
		$(this).addClass('active');
		container.attr('value', $(this).attr('value'));
		clickMethod();
	}

	buttons.click(onClickMethod);
}

// Превращает формы в контейнере в переключатели
// В один момент может быть включен только один сабмит
// Значение сабмита сохраняется в поле ввода формы inputSelector
// После нажатия сабмита выполняется метод submitMethod
function FormSwitchable(containerSelector, submitMethod, inputSelector)
{
	var container     = $(containerSelector);
	var forms         = container.find('form');
	var submitButtons = container.find("input[type='submit']");
	container.attr('value', 'undefined');

	function onSubmitMethod() {
		submitButtons.removeAttr('disabled');
		submitButtons.removeClass('active');
		var submitButton = $(this).find("input[type='submit']");
		submitButton.attr('disabled', 'disabled');
		submitButton.addClass('active');
		container.attr('value', $(this).find(inputSelector).val());	
		submitMethod();
	}

	forms.submit(onSubmitMethod);

	this.switchOff = function()
	{
		container.attr('value', 'undefined');
		submitButtons.removeAttr('disabled');
		submitButtons.removeClass('active');
	};
}

// Превращает кнопку в переключатель
// При нажатии вызывается метод clickMethod
function Checkable(button, clickMethod) {
	$(button).click(function(event) {
		if($(this).attr('activated') == 'true')
		{
			$(this).removeClass('active');
			$(this).attr('activated', 'false');
		}
		else
		{
			$(this).addClass('active');
			$(this).attr('activated', 'true');
		}
		clickMethod();
	});

	this.checkOff = function()
	{
		$(button).removeClass('active');
		$(button).attr('activated', 'false');
		clickMethod();
	};
}

function showErrorMessage(message, container)
{
  showMessage(message, container, "error");
}

function showSuccessMessage(message, container)
{
  showMessage(message, container, "success");
}

function showMessage(message, container, type)
{
    container.empty();
    container.css({ opacity: 0, display: "none" });

    var classes = "";
    switch(type)
    {
        case "error":
          classes += "alert alert-danger";
          break;

        case "success":
          classes += "alert alert-success";
          break;
    }

    container.append($("<div class='" + classes + "'>" + message + "</div>"));

    container.css("display", "block");
    container.animate({opacity: 1}, 500)
    .animate({opacity: 1}, 5000)
    .animate({opacity: 0}, 1000, function() { container.css("display", "none"); });
}